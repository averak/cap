<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--suppress checkSelectColumnExistInMybatisResultmap -->
<mapper namespace="net.averak.cap.adapter.dao.mapper.extend.ProjectMapper">
    <resultMap id="ProjectWithCronJobsResultMap"
               type="net.averak.cap.adapter.dao.entity.extend.ProjectWithCronJobsEntity"
               extends="net.averak.cap.adapter.dao.mapper.base.ProjectBaseMapper.ResultMapWithBLOBs">
        <collection property="cronJobs"
                    resultMap="net.averak.cap.adapter.dao.mapper.base.CronJobBaseMapper.ResultMapWithBLOBs"
                    columnPrefix="cron_job__">
        </collection>
    </resultMap>

    <select id="selectAll" resultMap="ProjectWithCronJobsResultMap">
        SELECT DISTINCT project.*,

                        cj.id                              AS cron_job__id,
                        cj.project_id                      AS cron_job__project_id,
                        cj.expression                      AS cron_job__expression,
                        cj.command                         AS cron_job__command,
                        cj.docker_image_repository_name    AS cron_job__docker_image_repository_name,
                        cj.docker_image_tag                AS cron_job__docker_image_tag,
                        cj.container_environment_variables AS cron_job__container_environment_variables
        FROM project
                 LEFT JOIN cron_job cj ON project.id = cj.project_id
        WHERE project.is_deleted = FALSE
    </select>

    <select id="selectById" resultMap="ProjectWithCronJobsResultMap">
        SELECT DISTINCT project.*,

                        cj.id                              AS cron_job__id,
                        cj.project_id                      AS cron_job__project_id,
                        cj.expression                      AS cron_job__expression,
                        cj.command                         AS cron_job__command,
                        cj.docker_image_repository_name    AS cron_job__docker_image_repository_name,
                        cj.docker_image_tag                AS cron_job__docker_image_tag,
                        cj.container_environment_variables AS cron_job__container_environment_variables
        FROM project
                 LEFT JOIN cron_job cj ON project.id = cj.project_id
        WHERE project.is_deleted = FALSE
          AND project.id = #{id}
    </select>

    <insert id="upsert" parameterType="net.averak.cap.adapter.dao.entity.base.ProjectEntity">
        INSERT INTO project (id,
                             name,
                             docker_image_repository_name,
                             docker_image_tag,
                             container_port,
                             host_port,
                             is_deleted,
                             container_environment_variables)
        values (#{id},
                #{name},
                #{dockerImageRepositoryName},
                #{dockerImageTag},
                #{containerPort},
                #{hostPort},
                #{isDeleted},
                #{containerEnvironmentVariables})
        ON DUPLICATE KEY UPDATE id                              = VALUES(id),
                                name                            = VALUES(name),
                                docker_image_repository_name    = VALUES(docker_image_repository_name),
                                docker_image_tag                = VALUES(docker_image_tag),
                                container_port                  = VALUES(container_port),
                                host_port                       = VALUES(host_port),
                                is_deleted                      = VALUES(is_deleted),
                                container_environment_variables = VALUES(container_environment_variables)
    </insert>
</mapper>